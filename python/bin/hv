#!/usr/bin/env python3
import argparse
from pathlib import Path
import sys
from typing import List
import difflib

from typing import Optional

import hotvect.hotvectjar
from hotvect.utils import execute_command_with_live_output

import logging

logging.basicConfig(level=logging.INFO, stream=sys.stdout)
logger = logging.getLogger(__name__)


def run_command(
        java_args: List[str],
        algorithm_jar: Path,
        algorithm_name: str,
        metadata_path: Path,
        source_path: Path,
        dest_path: Path,
        parameter_path: Path,
        dest_schema_path: Path,
        samples: Optional[int],
        command_type: str
):
    cmd = ["java"]
    cmd.extend(java_args)
    if not any(arg.startswith("-Xmx") for arg in java_args):
        cmd.append("-Xmx32g")
    if "-XX:+ExitOnOutOfMemoryError" not in java_args:
        cmd.append("-XX:+ExitOnOutOfMemoryError")
    if "-cp" not in java_args:
        cmd.extend(["-cp", str(hotvect.hotvectjar.HOTVECT_JAR_PATH)])

    cmd.extend([
        "com.hotvect.offlineutils.commandline.Main",
        "--algorithm-jar", str(algorithm_jar),
        "--algorithm-definition", algorithm_name,
        "--meta-data", str(metadata_path),
        f"--{command_type}",
        "--source", str(source_path),
        "--dest", str(dest_path)
    ])
    # Always use ordered processing
    cmd.append("--ordered")

    if command_type == "encode":
        cmd.extend(["--dest-schema-description", str(dest_schema_path)])

    if parameter_path is not None:
        cmd.extend(["--parameters", str(parameter_path)])
    if samples is not None:
        cmd.extend(["--samples", str(samples)])
    cmd_str = ' '.join(cmd)
    logger.info(f"Running command: {cmd_str}")
    execute_command_with_live_output(cmd_str, sys.stdout.write)


def get_closest_match(user_input, options):
    matches = difflib.get_close_matches(user_input, options, n=1, cutoff=0.0)
    return matches[0] if matches else None


def main():
    available_commands = ['audit', 'performance-test', 'encode', 'predict', 'list-available-transformations']
    parser = argparse.ArgumentParser(description="Hotvect CLI tool", add_help=True)
    subparsers = parser.add_subparsers(dest='command', help='Available operations', required=True)

    arguments = {
        "algorithm-jar": {
            "required": True,
            "help": "Path to the algorithm jar file"
        },
        "algorithm-name": {
            "required": True,
            "help": "The name of the algorithm to run"
        },
        "metadata-path": {
            "help": "Path to write the metadata of the operation"
        },
        "source-path": {
            "help": "Path to the data source to use for the operation"
        },
        "dest-path": {
            "help": "Path to write the result of the operation"
        },
        "parameter-path": {
            "help": "Path to the parameter file (if applicable)"
        },
        "dest-schema-path": {
            "help": "Path to write the schema description (in case of encoding)"
        },
        "samples": {
            "help": "Number of samples to process"
        },
    }

    for command in available_commands:
        subp = subparsers.add_parser(command, help=f"{command} operation")
        for argument, options in arguments.items():
            if argument == "java_args":
                subp.add_argument(argument, **options)
            else:
                subp.add_argument(f"--{argument}", **options)

    args, jvm_args = parser.parse_known_args()

    # Dynamically set default paths if not provided
    if not getattr(args, 'metadata_path', None):
        metadata_path = f"{args.algorithm_name}.{args.command}.metadata.json"
        logger.info(f"Metadata path not provided. Using default: {metadata_path}")
        args.metadata_path = metadata_path

    if not getattr(args, 'dest_path', None):
        dest_path = f"{args.algorithm_name}.{args.command}.output"
        logger.info(f"Destination path not provided. Using default: {dest_path}")
        args.dest_path = dest_path

    if not getattr(args, 'dest-schema-description', None):
        dest_schema_path = f"{args.algorithm_name}.{args.command}.output.schema"
        logger.info(f"Destination path not provided. Using default: {dest_schema_path}")
        args.dest_schema_path = dest_schema_path

    # Adjusted to check for parameter-path and not parameter
    parameter_path = getattr(args, 'parameter_path', None)

    run_command(
        java_args=jvm_args,
        algorithm_jar=Path(args.algorithm_jar),
        algorithm_name=args.algorithm_name,
        metadata_path=Path(args.metadata_path),
        source_path=Path(args.source_path) if args.source_path else None,
        dest_path=Path(args.dest_path),
        parameter_path=Path(parameter_path) if parameter_path else None,
        dest_schema_path=Path(args.dest_schema_path),
        samples=args.samples,
        command_type=args.command
    )


if __name__ == '__main__':
    main()
